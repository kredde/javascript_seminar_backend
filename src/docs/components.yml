components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        role:
          type: string
          enum: [teacher, student]
      example:
        email: fake@example.com
        firstName: Max
        lastName: Test
        role: teacher
    Users:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/User'
    Class:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        language:
          type: string
        subject:
          type: string
        country:
          type: string
        projectDuration:
          type: number
        meetingFrequency:
          type: number
        level:
          type: number
        languageLevel:
          type: string
        topics:
          type: array
          items:
            type: string
        teacher:
          $ref: '#/components/schemas/User'
        students:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        name: Class 1
        language: en
        country: DE
        projectDuration: 10
        meetingFrequency: 2
        languageLevel: A1
        subject: mathematics
        topics: [addition, subtraction]
        teacher: id
        level: 2
    Meeting:
      type: object
      properties:
        id:
          type: string
        project:
          type: string
        date:
          type: string
          format: date-time
        groupAssignments:
          type: string
          enum: [tandem, group3, group4, whole_class]
        groups:
          type: array
          items:
            type: array
            items:
              type: string
              description: student ids
        taskList:
          type: array
          items:
            type: string
    Project:
      type: object
      properties:
        id:
          type: string
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class'
        state:
          type: string
          enum: [pending, ongoing, done]
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Messages'
        meetings:
          type: array
          items:
            type: object
    Notification:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        text:
          type: string
        opened:
          type: boolean
        type:
          type: string
          enum: [notification, email, all]
        cta:
          type: object
          properties:
            text:
              type: string
            url:
              type: string
        user:
          $ref: '#/components/schemas/User'
    School:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        name: School 1
    Schools:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/School'
    Message:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        from:
          $ref: '#/components/schemas/User'
        to:
          $ref: '#/components/schemas/User'
        timestamp:
          type: string
    Messages:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/Message'
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
